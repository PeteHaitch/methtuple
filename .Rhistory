qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2,
labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", bquote('0.2 < beta < 0.8'), "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2,
labeller = label_parsed)
label_parsed
?parse
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", '0.2 < beta', "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2,
labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", '0.2 < beta < 0.8', "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2,
labeller = label_parsed)
variablellply(as.character('beta <= 0.2'), function(x) parse(text = x)
)
llply(as.character('beta <= 0.2'), function(x) parse(text = x))
library(plyr)
llply(as.character('beta <= 0.2'), function(x) parse(text = x))
llply(as.character('0.2 < beta < 0.8'), function(x) parse(text = x))
parse('<')
parse(text = '<')
parse(text = 'beta <=')
parse(text = 'beta')
parse(text = 'beta <=z <- 'beta <= 0.2'
')
z <- 'beta <= 0.2'
z
as.character(z)
llply(as.character(z), function(x) parse(text = x))
z <- c('beta <= 0.2', 'beta >= 0.8'
z <- c('beta <= 0.2', 'beta >= 0.8')
as.character(z)
llply(as.character(z), function(x) parse(text = x))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", c('0.2 < beta', '< 0.8'), "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2,
labeller = label_parsed)
0.2 < beta < 0.8
z <- c('beta <= 0.2', 'beta >= 0.8')
llply(as.character(z), function(x) parse(text = x))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", c('0.2 < beta', '< 0.8'), "beta >= 0.8"))
?prase
?parse
cat("x <- c(1,4)\n  x ^ 3 -10 ; outer(1:7,5:9)\n", file="xyz.Rdmped")
parse(file = "xyz.Rdmped", n = 3)
expression('0.2 < beta < 0.8')
plot(1, main = expression('0.2 < beta < 0.8'))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression('0.2 < beta < 0.8'), "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2,
labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression('0.2 < beta < 0.8'), "beta >= 0.8"))
mtcars
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
parse(file = "xyz.Rdmped", n = 3)
a <- parse(file = "xyz.Rdmped", n = 3)
plot(1, main = a)
unlink("xyz.Rdmped")
install.packages("MSToolkit")
(1<Y)&(Y<20)&(40<Y)
expression((1<Y)&(Y<20)&(40<Y))
plot(1, main = expression((1<Y)&(Y<20)&(40<Y)))
?expression
expression('beta < 0.2')
expression('0.2 < beta < 0.8')
plot(1, main = expression(0.2 < beta < 0.8))
plot(1, main = expression('0.2 < beta < 0.8'))
expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3)
plot(1, main = expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
0.2 < beta < 0.8
z <- c('beta <= 0.2', 'beta >= 0.8')
llply(as.character(z), function(x) parse(text = x))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8"))
c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8")
c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8")
c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8")
a <- expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3)
c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8")
a <- c("beta <= 0.2", expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3), "beta >= 0.8")
a
length(a)
paste(0 <= x) <= 1, paste(2 <= x) <= 3)
plot(1, main = expression(paste(0 <= x) <= 1, paste(2 <= x) <= 3))
plot(1, main = expression(paste(0 <= beta) <= 1, paste(2 <= beta) <= 3))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression(paste(0 <= beta) <= 1, paste(2 <= x) <= 3), "beta >= 0.8"))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression(paste(0 <= beta) <= 1), "beta >= 0.8"))
l
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression(paste(0.2 < beta) < 0.8), "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("beta <= 0.2", expression(paste(0.2 < beta) < 0.8), "beta >= 0.8"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
label_parsed
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("High CpG density", 'Intermediate CpG density', "Low CpG density"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("High CpG density", 'Intermediate CpG density', "Low CpG density"))
mtcars
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_both)
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c("High_CpG_density", 'Intermediate_CpG_density', "Low_CpG_density"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c(paste("High", "CpG_density"), 'Intermediate_CpG_density', "Low_CpG_density"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
paste('High CpG') 'Density')
mtcars$cyl2 <- factor(mtcars$cyl, labels = c(expression(paste('High CpG') 'Density'), 'Intermediate_CpG_density', "Low_CpG_density"))
mtcars$cyl2 <- factor(mtcars$cyl, labels = c('CpG[dense]', 'Intermediate_CpG_density', "Low_CpG_density"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
mtcars$cyl2 <- factor(mtcars$cyl, labels = c('CpG-dense', 'Intermediate_CpG_density', "Low_CpG_density"))
qplot(wt, mpg, data = mtcars) + facet_grid(. ~ cyl2, labeller = label_parsed)
?read.table
nchar('coverage, n_500 = n_500, beta_500 = average.methylation_500$beta, gamma_500 = av')
library(GenomicRanges)
?countOverlaps
?rm
paste(gamma.quantilesp[3] < beta)
gamma.quantilesp[3]
gamma.quantilesp[3] <- 5
g <- c(3, 6, 13)
g
paste('x', g[1])
paste('x', > g[1])
expression(paste(0.2 < gamma) < 0.8)
plot(1, main = expression(paste(0.2 < gamma) < 0.8))
plot(1, main = expression(paste(g[1] < gamma) < 0.8))
plot(1, main = expression(paste(gamma[1/3] < gamma) < 0.8))
plot(1, main = expression(paste(gamma[(1/3)] < gamma) < 0.8))
plot(1, main = expression(paste(gamma[(1/3)] < gamma) < gamma[(2/3)]))
?melt
library(reshape2)
?melt
library(plyr)
?ddplt
?ddply
?split
require(stats); require(graphics)
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
g
x
xg <- split(x, g)
xg
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
sapply(xg, length)
sapply(xg, mean)
z <- unsplit(lapply(split(x, g), scale), g)
z
zz <- x
zz
split(zz, g) <- lapply(split(x, g), scale)
zz
tapply(z, g, sd)
tapply(zz, g, sd)
gg
g
g <- airquality$Month
g
l <- split(airquality, g)
l
l <- lapply(l, transform, Oz.Z = scale(Ozone))
l
aq2 <- unsplit(l, g)
aq2
with(aq2, tapply(Oz.Z,  Month, sd, na.rm=TRUE))
?attach
library(reshape2)
?melt
aggregate
?aggregate
library(ggplot2)
?save
?GRanges
library(GenomicRanges)
?GRanges
?findOverlaps
?IntervalTree
?findOverlaps
?findOverlaps,GenomicRanges,GenomicRanges-method
?'findOverlaps,GenomicRanges,GenomicRanges-method'
print(paste('Getting window-averaged methylation for chromosome ', chr, sep = ''))
chrom <- 'chr8'
print(paste('Getting window-averaged methylation for chromosome ', chrom, sep = ''))
print(paste('Getting window-averaged methylation for ', chrom, sep = ''))
print(paste('Getting window-averaged methylation for ', chrom, '...', sep = ''))
library(ggplot2)
x <- rep(1, 10)
y <- rep(1, 10)
scatter.smooth(x,y)
car(x,y)
cor(x,y)
log((10*0.5)/(0.5*0.5))
log((9*1.5)/(0.5*0.5))
y[10] <- 0
cor(x,y)
x,y
x
y
log((8*0.5)/(1.5*1.5))
log((8*0.5)/(1*1))
x[1] <- 0
scatter.smooth(x,y)
cor(x,y)
scatter.smooth(rnorm(1000), rnorm(1000))
smoothScatter(rnorm(1000), rnorm(1000))
?smoothScatter
library(graphics)
?graphics
log((10.5 * 0.5)/(0.5 * 0.5))
log((9.5 * 1.5)/(0.5 * 0.5))
log((9.5 * 0.5)/(1.5 * 0.5))
log2((10.5 * 0.5)/(0.5 * 0.5))
log2((9.5 * 0.5)/(1.5 * 0.5))
log2((9.5 * 1.5)/(0.5 * 0.5))
log2((8.5 * 1.5)/(1.5 * 1.5))
log2((8.5 * 0.5)/(1.5 * 1.5))
log2((8.5 * 2.5)/(0.5 * 0.5))
log2((5.5 * 5.5)/(0.5 * 0.5))
log2((110 * 100)/ (100 * 100))
log2((109 * 100)/ (101 * 100))
log2((109 * 101)/ (100 * 100))
log2((108 * 100)/ (101 * 101))
log2((108 * 102)/ (100 * 100))
log2((105 * 105)/ (100 * 100))
x <- rep(1,10)
y <- rep(1, 10)
cor(x,y)
y[10] <- 0
cor(x,y)
y[10] <- 1
x[1] <- y[1] <- 0
cor(x,y)
x[1] <- y[1] <- 1
x
y
x[1:2] <- y[1:2] <- 0
cor(x,y)
x[1:2] <- y[1:2] <- 1
x[1] <- 0
y[10] <- 0
x
y
cor(x,u)
cor(x,y)
y[10] <- 1
x[1] <- 1
x
y
x[1:5] <- y[1:5] <- 0
x
y
cor(x,y)
log2((10.5 * 0.5) / (0.5 * 0.5))
log2((10.5 * 0.1) / (0.1 * 0.1))
log2((10.01 * 0.01) / (0.01 * 0.01))
log2((10.0001 * 0.0001) / (0.0001 * 0.0001))
log2((9.0001 * 1.0001) / (0.0001 * 0.0001))
log2((5.0001 * 5.0001) / (0.0001 * 0.0001))
n <- 1:1000
f <- function(x){log2(((x + 0.5) * 0.5)/ (0.5 * 0.5))}
f(10)
plot(n, f(n))
g <- function(x){log2(((x _+ 0.5) * 1.5) / (0.5 * 0.5))}
g <- function(x){log2(((x + 0.5) * 1.5) / (0.5 * 0.5))}
n <- 0:1000
n <- 0:1000
g <- function(x){log2(((x + 0.5) * 1.5) / (1.5 * 1.5))}
plot(n, g(n))
plot(n, g(n) - log2(10))
plot(n, g(n) - log2(n))
g(1000)
log2(10000)
log2(1000)
n <- 0:10000
plot(n, g(n) - log2(n))
g
g(n) - log2(n)
log2(-0.5848904)
log2(0.5848904)
2^(-0.5848904)
library(ggplot2)
?ggsave
?rbind
library(ggplot2)
library(grid)
library(ggplot2)
library(grid)
library(ggplot2)
themes.list <- list("theme_grey", "theme_black", "theme_bw", "theme_fullframe",
"theme_minimal", "theme_minimal_cb",
"theme_minimal_cb_L","theme_minimal_light"
)
theme_minimal_cb <- function (base_size = 12, base_family = "", ...){
modifyList (theme_minimal (base_size = base_size, base_family = base_family),
list (panel.border = theme_rect(fill = NA, colour = "grey50")))
}
theme_minimal_cb_L <- function (base_size = 12, base_family = "", ...){
modifyList (theme_minimal (base_size = base_size, base_family = base_family),
list (axis.line = theme_segment (colour = "black")))
}
theme_minimal_light <- function (base_size = 12, base_family = "", ...){
modifyList (theme_minimal (base_size = base_size, base_family = base_family),
list (axis.ticks = theme_segment (colour = "grey50"),
axis.text.x = theme_text (colour = "grey33"),
axis.text.y = theme_text (colour = "grey33")))
}
theme_fullframe <- function (base_size = 12){
structure(list(
axis.line = theme_blank(),
axis.text.x = theme_blank(),
axis.text.y = theme_blank(),
axis.ticks = theme_blank(),
axis.title.x = theme_blank(),
axis.title.y = theme_blank(),
axis.ticks.length = unit(0, "lines"),
axis.ticks.margin = unit(0, "lines"),
legend.position = "none",
panel.background = theme_blank(),
panel.border = theme_blank(),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.margin = unit(0, "lines"),
plot.background = theme_blank(),
plot.margin = unit(0*c(-1.5, -1.5, -1.5, -1.5), "lines")
), class = "options")
}
theme_black <- function (base_size = 12){
structure(list(
axis.line = theme_blank(),
axis.text.x = theme_text(size = base_size * 0.8, colour = 'white', lineheight = 0.9, vjust = 1),
axis.text.y = theme_text(size = base_size * 0.8, colour = 'white', lineheight = 0.9, hjust = 1),
axis.ticks = theme_segment(colour = "white", size = 0.2),
axis.title.x = theme_text(size = base_size, colour = 'white', vjust = 1),
axis.title.y = theme_text(size = base_size, colour = 'white', angle = 90, vjust = 0.5),
axis.ticks.length = unit(0.3, "lines"),
axis.ticks.margin = unit(0.5, "lines"),
legend.background = theme_rect(colour = NA),
legend.key = theme_rect(colour = "white", fill = 'black'),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NA,
legend.key.width = NA,
legend.text = theme_text(size = base_size * 0.8, colour = 'white'),
legend.title = theme_text(size = base_size * 0.8, face = "bold", hjust = 0, colour = 'white'),
legend.position = "right",
legend.text.align = NA,
legend.title.align = NA,
legend.direction = "vertical",
legend.box = NA,
panel.background = theme_rect(fill = "black", colour = NA),
panel.border = theme_rect(fill = NA, colour = "white"),
panel.grid.major = theme_line(colour = "grey20", size = 0.2),
panel.grid.minor = theme_line(colour = "grey5", size = 0.5),
panel.margin = unit(0.25, "lines"),
strip.background = theme_rect(fill = "grey30", colour = "grey10"),
strip.text.x = theme_text(size = base_size * 0.8, colour = 'white'),
strip.text.y = theme_text(size = base_size * 0.8, colour = 'white', angle = -90),
plot.background = theme_rect(colour = 'black', fill = 'black'),
plot.title = theme_text(size = base_size * 1.2),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines")
), class = "options")
}
mdf <- data.frame(x <- seq(0, 10), y=rnorm(x),
f=factor(rep(letters[1:2], each=3, length=length(x))))
## test with facets
## p <- qplot(x, y, data=mdf, colour=f, geom=c("line", "point"), facets=f~.)
p <- qplot(x, y, data=mdf, colour=f, geom=c("line", "point")) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0))
all.themes <- lapply(themes.list, function(.t) {
gTree(children=gList(ggplotGrob(p + get(.t)()),
rectGrob(),
textGrob(bquote(italic(.(.t))),
y=1, vjust=1.2, gp=gpar(col="grey"))))
})
library(gridExtra)
library(imguR)
imguR(width=8, height=16)
do.call(grid.arrange, c(all.themes, list(ncol=2)))
unit(0.3, "lines")
theme_blank()
axis.line = theme_blank(),
base_size <- 12
theme_text(size = base_size * 0.8, colour = 'white', lineheight = 0.9, vjust = 1)
theme_text(size = base_size * 0.8, colour = 'white', lineheight = 0.9, hjust = 1)
theme_segment(colour = "white", size = 0.2)
theme_text(size = base_size, colour = 'white', vjust = 1)
theme_text(size = base_size, colour = 'white', angle = 90, vjust = 0.5)
unit(0.3, "lines")
unit(0.5, "lines")
theme_rect(colour = NA)
theme_rect(colour = "white", fill = 'black')
unit(1.2, "lines")
structure(list(
axis.line = theme_blank(),
axis.text.x = theme_text(size = base_size * 0.8, colour = 'white', lineheight = 0.9, vjust = 1),
axis.text.y = theme_text(size = base_size * 0.8, colour = 'white', lineheight = 0.9, hjust = 1),
axis.ticks = theme_segment(colour = "white", size = 0.2),
axis.title.x = theme_text(size = base_size, colour = 'white', vjust = 1),
axis.title.y = theme_text(size = base_size, colour = 'white', angle = 90, vjust = 0.5),
axis.ticks.length = unit(0.3, "lines"),
axis.ticks.margin = unit(0.5, "lines"),
legend.background = theme_rect(colour = NA),
legend.key = theme_rect(colour = "white", fill = 'black'),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NA,
legend.key.width = NA,
legend.text = theme_text(size = base_size * 0.8, colour = 'white'),
legend.title = theme_text(size = base_size * 0.8, face = "bold", hjust = 0, colour = 'white'),
legend.position = "right",
legend.text.align = NA,
legend.title.align = NA,
legend.direction = "vertical",
legend.box = NA,
panel.background = theme_rect(fill = "black", colour = NA),
panel.border = theme_rect(fill = NA, colour = "white"),
panel.grid.major = theme_line(colour = "grey20", size = 0.2),
panel.grid.minor = theme_line(colour = "grey5", size = 0.5),
panel.margin = unit(0.25, "lines"),
strip.background = theme_rect(fill = "grey30", colour = "grey10"),
strip.text.x = theme_text(size = base_size * 0.8, colour = 'white'),
strip.text.y = theme_text(size = base_size * 0.8, colour = 'white', angle = -90),
plot.background = theme_rect(colour = 'black', fill = 'black'),
plot.title = theme_text(size = base_size * 1.2),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines")
), class = "options")
theme_blac()
theme_black()
qplot(1:10) + theme_black()
citation(ggplot2)
citation('ggplot2')
?theme_text
set.seed(101)
n <- 50000
X <- mvrnorm(n, mu=c(.5,2.5), Sigma=matrix(c(1,.6,.6,1), ncol=2))
# Generate some data
library(MASS)
set.seed(101)
n <- 50000
X <- mvrnorm(n, mu=c(.5,2.5), Sigma=matrix(c(1,.6,.6,1), ncol=2))
head(X)
smoothScatter(X)
?smoothScatter
plot(1:10, col = 'darkgrey')
library(gviz)
source('http://bioconductor.org/biocLite.R')
biocLite('gviz')
biocLite('Gviz')
biocLite(character(), ask=FALSE)
library(GenomicRanges)
stop('Error: Sorry, lor does not yet support strand-specific log odds ratios.')
stop('Sorry, lor does not yet support strand-specific log odds ratios.')
stop('Sorry, lor does not yet support strand-specific log odds ratios. Please use strand = 'combined''')
stop('Sorry, lor does not yet support strand-specific log odds ratios. Please use strand = 'combined')
stop('Sorry, lor does not yet support strand-specific log odds ratios. Please use strand = \'combined\'')
setClass("bloop", contains = "GRanges", representation='character')
showClass('bloop')
showClass("GRanges")
setClass("bloop", contains = "GRanges", representation='DataFrame')
setClass("bloop", contains = "GRanges", representation='data.frame')
showClass(bloop)
showClass('bloop')
setClass("bloop", contains = "GRanges", representation(blonko ='data.frame')
setClass("bloop", contains = "GRanges", representation(blonko ='data.frame'))
showClass('bloop')
tmp <- function(seqnames='chr2', ranges = IRanges(start = 2, end = 6), blonko = data.frame(x = 2, y = 6))
bloop <- function(seqnames, ranges, blonko){
new("bloop", GRanges(seqnames, ranges),
blonko = blonko)
}
bloop('chr2', IRanges(start = 2, width = 5), blonko = data.frame(x = 5, y = 12))
a <- bloop('chr2', IRanges(start = 2, width = 5), blonko = data.frame(x = 5, y = 12))
a
str(a)
a@blonko
width(a)
class(a)
slotNames(a)
showClass(a)
showClass('bloop')
slot(a)
slotNames(a)
a@metadata
bloop <- function(seqnames, ranges, blonko){
new("bloop", GRanges(seqnames, ranges, metadata),
blonko = blonko)
}
a <- bloop(seqnames = 'chr2', ranges = IRanges(start = 2, width = 5), blonko = data.frame(x = 5, y = 12), metadata = 'The sample name')
bloop <- function(seqnames, ranges, blonko){
new("bloop", GRanges(seqnames, ranges, metadata),
blonko = blonko)
}
a <- bloop(seqnames = 'chr2', ranges = IRanges(start = 2, width = 5), metadata = list('The sample name'), blonko = data.frame(x = 5, y = 12))
a
rm(a)
?GRanges
bloop <- function(seqnames, ranges, blonko){
new("bloop", GRanges(seqnames, ranges),
blonko = blonko)
}
a <- bloop(seqnames = 'chr2', ranges = IRanges(start = 2, width = 5), blonko = data.frame(x = 5, y = 12))
a
a@blonko
a@M
?quantile
library(ggplot2)
?ggtitle
?qplot
library(Rcpp)
library(inline)
fx <- cxxfunction(signature( x = "numeric" ), 'NumericVector xx(x);
return wrap( std::accumulate( xx.begin(), xx.end(), 0.0));',
plugin = "Rcpp")
